
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ОбновитьАктив(Справочники.Подразделения.ПустаяСсылка());
	//ОбновитьПассив(Справочники.Подразделения.ПустаяСсылка());
	//ОбновитьГрафикДС(Справочники.Подразделения.ПустаяСсылка());
	//ОбновитьСписокДокументов(Справочники.Подразделения.ПустаяСсылка());
	//УстановитьНужныйЗаголовок();
	//папки.Параметры.УстановитьЗначениеПараметра("Подразделение",Справочники.Подразделения.ПустаяСсылка());
	//ОбновитьДДС(Справочники.Подразделения.ПустаяСсылка());
	//УстановитьЗаголовокПодразделение();
	//УстановитьЗаголовокДДС();
	//ОбновитьЧистыйДенежныйПоток();
	//ОбновитьОстаткиПодразделений();
	
	Массив = Новый Массив;
	МассивИсключений = Новый Массив;
	
	//ТекущийЭлементПодразделения = ПараметрыСеанса.ТекущийПользователь.Подразделение;
	МассивПодразделений = Новый Массив;
	Для Каждого Строка из ПараметрыСеанса.ТекущийПользователь.СписокПодразделений Цикл
			МассивПодразделений.Добавить(Строка.Подразделение);	
	КонецЦикла;
	
	Для Каждого Строка из ПараметрыСеанса.ТекущийПользователь.СписокПодразделений Цикл
		Если НЕ ЯвляетсяВложенным(Строка.Подразделение,МассивПодразделений ) Тогда
			МассивИсключений.Добавить(Строка.Подразделение.Родитель);
		КонецЕсли;
	КонецЦикла;



	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПодразделений",МассивПодразделений);
	Запрос.Текст =      "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Подразделения.Ссылка КАК Ссылка,
	                    |	Подразделения.ВерсияДанных,
	                    |	Подразделения.ПометкаУдаления,
	                    |	Подразделения.Родитель КАК Родитель,
	                    |	Подразделения.Код,
	                    |	Подразделения.Наименование,
	                    |	Подразделения.кодБаланс,
	                    |	Подразделения.Остаток,
	                    |	Подразделения.Предопределенный,
	                    |	Подразделения.ИмяПредопределенныхДанных
	                    |ИЗ
	                    |	Справочник.Подразделения КАК Подразделения
	                    |ГДЕ
	                    |	Подразделения.Ссылка В ИЕРАРХИИ(&МассивПодразделений)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	Подразделения.Родитель,
	                    |	Подразделения.Ссылка,
	                    |	Подразделения.ВерсияДанных,
	                    |	Подразделения.ПометкаУдаления,
	                    |	Подразделения.Код,
	                    |	Подразделения.Наименование,
	                    |	Подразделения.кодБаланс,
	                    |	Подразделения.Остаток,
	                    |	Подразделения.Предопределенный,
	                    |	Подразделения.ИмяПредопределенныхДанных";
	Результат = Запрос.Выполнить().Выгрузить();//.Выгрузить();
	Дерево = ДеревоТест.ПолучитьЭлементы();
	Дерево.Очистить();

	Для Каждого Строка из Результат Цикл
		РезультатИсключения = МассивИсключений.Найти(Строка.Родитель);
		Если РезультатИсключения<>Неопределено Тогда
			Строка.Родитель = Справочники.Подразделения.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ЗаполнениеДерева(Дерево, Результат, Справочники.Подразделения.ПустаяСсылка());

	
	//Найти все подразделения
	МассивПодразделений =  Результат.ВыгрузитьКолонку("Ссылка");
	//Найти все статьи вход
	ЗапросПоСтатьям = Новый ЗАпрос;
	ЗапросПоСтатьям.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	ЗапросПоСтатьям.УстановитьПараметр("Статья", "Вход");
	ЗапросПоСтатьям.Текст ="ВЫБРАТЬ
	                       |	СтатьиДвижения.Ссылка
	                       |ИЗ
	                       |	Справочник.СтатьиДвижения КАК СтатьиДвижения
	                       |ГДЕ
	                       |	СтатьиДвижения.Наименование ПОДОБНО ""%Вход%""
	                       |	И НЕ СтатьиДвижения.ЭтоГруппа
	                       |	И СтатьиДвижения.Подразделение В(&МассивПодразделений)"; 	
	 Статьи = ЗапросПоСтатьям.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	 ВходящиеДокументы.Параметры.УстановитьЗначениеПараметра("МассивПодразделений", МассивПодразделений);
	 ВходящиеДокументы.Параметры.УстановитьЗначениеПараметра("Статьи", Статьи);

	 ОбновитьДиаграммаПульс();
 КонецПроцедуры
 
 Функция ЯвляетсяВложенным(Подразделение, МассивПодразделений)
	Если Подразделение.Родитель<>Справочники.Подразделения.ПустаяСсылка() И МассивПодразделений.Найти(Подразделение.Родитель)<>Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Подразделение.Родитель.Родитель<>Справочники.Подразделения.ПустаяСсылка() И МассивПодразделений.Найти(Подразделение.Родитель.Родитель)<>Неопределено Тогда
        Возврат Истина;
	ИначеЕсли Подразделение.Родитель.Родитель.Родитель<>Справочники.Подразделения.ПустаяСсылка() И МассивПодразделений.Найти(Подразделение.Родитель.Родитель.Родитель)<>Неопределено Тогда
        Возврат Истина;
	ИначеЕсли Подразделение.Родитель.Родитель.Родитель.Родитель<>Справочники.Подразделения.ПустаяСсылка() И МассивПодразделений.Найти(Подразделение.Родитель.Родитель.Родитель.Родитель)<>Неопределено Тогда
        Возврат Истина;
	ИначеЕсли Подразделение.Родитель.Родитель.Родитель.Родитель.Родитель<>Справочники.Подразделения.ПустаяСсылка() И МассивПодразделений.Найти(Подразделение.Родитель.Родитель.Родитель.Родитель.Родитель)<>Неопределено Тогда
        Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции			
	

Процедура ЗаполнениеДерева(Дерево, ТЗ, Родитель)
	//Если Первый Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Родитель", Родитель);
		РезультатМассив = ТЗ.НайтиСтроки(Отбор);
		Если РезультатМассив.Количество()>0 Тогда
			Для Каждого Строка из РезультатМассив Цикл
				СтрокаДерево = Дерево.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерево, Строка); 
				ЭлементыДереваНовый = СтрокаДерево.ПолучитьЭлементы();	
				ЗаполнениеДерева(ЭлементыДереваНовый,ТЗ,Строка.Ссылка);         
							
												

			КонецЦикла;
		КонецЕсли;
	//КонецЕсли;
	//Для Каждого Строка из ТЗ цикл
	//		
	//КонецЦикла;
	
КонецПРоцедуры

&НаСервере
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
//Процедура ОбновитьОстаткиПодразделений()
//	Дерево = РеквизитФормыВЗначение("Подразделения");
//	ЗапросОстатков = Новый Запрос("ВЫБРАТЬ
//	                              |	СУММА(ДвиженияОстатки.СуммаОстаток) КАК СуммаОстаток,
//	                              |	Подразделения.Ссылка КАК Подразделение
//	                            
//	                              |ИЗ
//	                              |	Справочник.Подразделения КАК Подразделения
//	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Движения.Остатки КАК ДвиженияОстатки
//	                              |		ПО Подразделения.Ссылка = ДвиженияОстатки.Подразделение
//	                              |
//	                              |СГРУППИРОВАТЬ ПО
//	                              |	Подразделения.Ссылка
//	                            	                              |
//	                              |УПОРЯДОЧИТЬ ПО
//	                              |	Подразделение
//	                              |ИТОГИ
//	                              |	СУММА(СуммаОстаток)
//	                              |ПО
//	                              |	ОБЩИЕ,
//	                              |	Подразделение ТОЛЬКО ИЕРАРХИЯ");
//	РезультатЗапроса = ЗапросОстатков.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
//	//РезультатЗапроса = ЗапросОстатков.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
//	//Подразделения.Загрузить(РезультатЗапроса);
//	Дерево = РезультатЗапроса;
////	ЗначениеВРеквизитФормы(Дерево,"Подразделения");
//КонецПроцедуры // ОбновитьОстаткиПодразделений()


&НаСервере
Процедура ОбновитьДиаграммаПульс(Подразделение=Неопределено)
//	МассивПодразделений = Новый Массив;
//	Для Каждого Строка из ПараметрыСеанса.ТекущийПользователь.СписокПодразделений Цикл
//		МассивПодразделений.Добавить(Строка.Подразделение);	
//	КонецЦикла;

//	Запрос = Новый Запрос;
//	
////	ЭлементИсключение = ПараметрыСеанса.ТекущийПользователь.Подразделение.Родитель;
////	Запрос.УстановитьПараметр("ЭлементИсключение", ЭлементИсключение); 
//	Запрос.Текст =      "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	                    |	Подразделения.Ссылка КАК Ссылка,
//	                    |	Подразделения.ВерсияДанных,
//	                    |	Подразделения.ПометкаУдаления,
//	                    |	Подразделения.Родитель КАК Родитель,
//	                    |	Подразделения.Код,
//	                    |	Подразделения.Наименование,
//	                    |	Подразделения.кодБаланс,
//	                    |	Подразделения.Остаток,
//	                    |	Подразделения.Предопределенный,
//	                    |	Подразделения.ИмяПредопределенныхДанных
//	                    |ИЗ
//	                    |	Справочник.Подразделения КАК Подразделения
//	                    |
//	                    |СГРУППИРОВАТЬ ПО
//	                    |	Подразделения.Родитель,
//	                    |	Подразделения.Ссылка,
//	                    |	Подразделения.ВерсияДанных,
//	                    |	Подразделения.ПометкаУдаления,
//	                    |	Подразделения.Код,
//	                    |	Подразделения.Наименование,
//	                    |	Подразделения.кодБаланс,
//	                    |	Подразделения.Остаток,
//	                    |	Подразделения.Предопределенный,
//	                    |	Подразделения.ИмяПредопределенныхДанных";
//	Бизнесы = Запрос.Выполнить().Выгрузить();//.Выгрузить();
//	

//	
//	ЗапросОстатков = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	                              |	СУММА(ДвиженияОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток,
//	                              |	ДвиженияОстаткиИОбороты.СтатьяДвижения,
//	                              |	ДвиженияОстаткиИОбороты.Подразделение
//	                              |ИЗ
//	                              |	РегистрНакопления.Движения.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, , ) КАК ДвиженияОстаткиИОбороты
//	                              |
//	                              |СГРУППИРОВАТЬ ПО
//	                              |	ДвиженияОстаткиИОбороты.СтатьяДвижения,
//	                              |	ДвиженияОстаткиИОбороты.Подразделение");
//	
//	ЗапросОстатков.УстановитьПараметр("ДатаНачала",текПериод.ДатаНачала);
//	ЗапросОстатков.УстановитьПараметр("ДатаОкончания",текПериод.ДатаОкончания);
//	//ЗапросОстатков.УстановитьПараметр("Бизнес", Бизнесы);
//	//Если ЗначениеЗаполнено(Подразделение) Тогда
//	//	ЗапросОстатков.УстановитьПараметр("Подразделение",Подразделение);
//	//Иначе
//	//	ЗапросОстатков.УстановитьПараметр("Подразделение",Справочники.Подразделения.ПустаяСсылка());
//	//КонецЕсли;
//	МассивСтатей = Новый Массив;
//	Для Каждого Строка из ПараметрыСеанса.ТекущийПользователь.СписокСтатей Цикл
//		МассивСтатей.Добавить(Строка.СтатьяДвижения);		
//	КонецЦикла;
//	//Если МассивСтатей.Количество()>0 Тогда
//	//	ЗапросОстатков.УстановитьПараметр("ФильтрПоСтатьям", Истина);	
//	//Иначе
//	//	ЗапросОстатков.УстановитьПараметр("ФильтрПоСтатьям", Ложь);
//	//КонецЕсли;
//	//СтатьиДвижения = ПолучитьПолныйСписокСтатей(МассивПодразделений, МассивСтатей);

//	//ЗапросОстатков.УстановитьПараметр("МассивСтатей", СтатьиДвижения);

//	Выборка = ЗапросОстатков.Выполнить().Выбрать();
//	
//	ГрафикПульс.Очистить();
//	ГрафикПульс.РежимПолупрозрачности=РежимПолупрозрачностиДиаграммы.Использовать;
//	ГрафикПульс.ПроцентПолупрозрачности=80;
//	ГрафикПульс.обновление = Ложь;
//	Пока Выборка.Следующий() Цикл	
//	Серия = ГрафикПульс.УстановитьСерию(Выборка.СтатьяДвижения);
//	Точка = ГрафикПульс.УстановитьТочку(Выборка.Подразделение);
//	ГрафикПульс.УстановитьЗначение(Точка, Серия, Выборка.СуммаКонечныйОстаток);
//	КонецЦикла;
//	ГрафикПульс.обновление = Истина;
КонецПроцедуры

Функция ПолучитьПолныйСписокСтатей(МассивПодразделений, МассивСтатей)
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	СтатьиДвижения.Ссылка,
	                |	СтатьиДвижения.Подразделение
	                |ИЗ
	                |	Справочник.СтатьиДвижения КАК СтатьиДвижения
	                |ГДЕ
	                |	СтатьиДвижения.Ссылка В ИЕРАРХИИ(&МассивСтатей)";
	Запрос.УстановитьПараметр("МассивСтатей", МассивСтатей);
	РезультатСтатей = Запрос.Выполнить().Выгрузить();     
	
	ЗапросПодразделений = Новый Запрос;
	
	ЗапросПодразделений.Текст =      "ВЫБРАТЬ
	                    |	Подразделения.Ссылка КАК Подразделение
	                    |ИЗ
	                    |	Справочник.Подразделения КАК Подразделения
	                    |ГДЕ
	                    |	Подразделения.Ссылка В ИЕРАРХИИ(&МассивПодразделений)
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	Подразделения.Ссылка";
	МассивПодразделенийСПустымиСтатьями = Новый Массив;
	Для Каждого Строка из МассивПодразделений Цикл
		Совпадений = Ложь;
		
		ЗапросПодразделений.УстановитьПараметр("МассивПодразделений", Строка);
		РезультатПодразделений = ЗапросПодразделений.Выполнить().Выгрузить();
		
		//поиск совпадений
		Для Каждого Подразделение из РезультатПодразделений Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Подразделение", Подразделение.Подразделение);
			РезультатПоиска = РезультатСтатей.НайтиСтроки(Отбор);
			Если РезультатПоиска.Количество()>0 Тогда
				Совпадений = Истина;
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		Если Совпадений = Ложь Тогда 
			МассивПодразделенийСПустымиСтатьями.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	//Запрос по пустым подразделениям по всем статьям
	//добавляем в массив
	ЗапросПоСтатьям = Новый Запрос;
	ЗапросПоСтатьям.УстановитьПараметр("МассивПодразделенийСПустымиСтатьями", МассивПодразделенийСПустымиСтатьями);
	ЗапросПоСтатьям.Текст = "ВЫБРАТЬ
	                        |	СтатьиДвижения.Ссылка
	                        |ИЗ
	                        |	Справочник.СтатьиДвижения КАК СтатьиДвижения
	                        |ГДЕ
	                        |	СтатьиДвижения.Подразделение В ИЕРАРХИИ(&МассивПодразделенийСПустымиСтатьями)";
	РезультатПоСтатьям = ЗапросПОСтатьям.Выполнить().Выгрузить();
	Для Каждого Строка из РезультатПоСтатьям Цикл
		МассивСтатей.Добавить(Строка.Ссылка);	
	КонецЦикла;
	
	Возврат МассивСтатей;
	
КонецФункции


&НаСервере
Процедура ОбновитьЧистыйДенежныйПоток(Подразделение=Неопределено)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	Подразделения.Ссылка КАК Подразделение,
	             |	ДвиженияОстаткиИОбороты.Период КАК Период,
	             |	СУММА(ДвиженияОстаткиИОбороты.СуммаОборот) КАК СуммаОборот,
	             |	СУММА(ДвиженияОстаткиИОбороты.СуммаПриход) КАК СуммаПриход,
	             |	СУММА(ДвиженияОстаткиИОбороты.СуммаРасход * -1) КАК СуммаРасход,
	             |	СУММА(ДвиженияОстаткиИОбороты.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
				 |  ДвиженияОстаткиИОбороты.СтатьяДвижения КАК СтатьяДвижения,
	             |	СУММА(ДвиженияОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток
	             |ИЗ
	             |	Справочник.Подразделения КАК Подразделения";
	Если Месяц(текПериод.ДатаНачала)=Месяц(текПериод.ДатаОкончания) тогда
		Запрос.Текст=Запрос.Текст+"			 
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Движения.ОстаткиИОбороты(&ДатаН, &ДатаК, Месяц, , СтатьяДвижения В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвижения.ДенежныеСредства))) КАК ДвиженияОстаткиИОбороты";
		ПоДням=Истина;
	Иначе				 
		Запрос.Текст=Запрос.Текст+"			 
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Движения.ОстаткиИОбороты(&ДатаН, &ДатаК, Месяц, , СтатьяДвижения В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвижения.ДенежныеСредства))) КАК ДвиженияОстаткиИОбороты";
		ПоДням=Ложь;
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"			 
	             |		ПО ДвиженияОстаткиИОбороты.ПодразделениеКудаОткуда = Подразделения.Ссылка
	             |ГДЕ
	             |	Подразделения.ПометкаУдаления = ЛОЖЬ";
	Если НЕ (Подразделение=Неопределено ИЛИ Подразделение=Справочники.Подразделения.ПустаяСсылка()) тогда
		Запрос.Текст=Запрос.Текст+"			 
	             |	И Подразделения.Ссылка В ИЕРАРХИИ(&Подразделение)";
		Запрос.УстановитьПараметр("Подразделение",Подразделение);
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"			 
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ДвиженияОстаткиИОбороты.Период,
				 |  ДвиженияОстаткиИОбороты.СтатьяДвижения,
	             |	Подразделения.Ссылка
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	СтатьяДвижения
	             |ИТОГИ
	             |	СУММА(СуммаОборот),
	             |	СУММА(СуммаПриход),
	             |	СУММА(СуммаРасход),
	             |	СУММА(СуммаНачальныйОстаток),
	             |	СУММА(СуммаКонечныйОстаток)
	             |ПО
	             |	СтатьяДвижения Только ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("ДатаН",текПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаК",текПериод.ДатаОкончания);
	
	ЧистыйДенежныйПоток.Очистить();
	ЧистыйДенежныйПоток.РежимПолупрозрачности=РежимПолупрозрачностиДиаграммы.Использовать;
	ЧистыйДенежныйПоток.ПроцентПолупрозрачности=80;
	ЧистыйДенежныйПоток.ТипДиаграммы=ТипДиаграммы.Гистограмма;
	ЧистыйДенежныйПоток.Анимация=АнимацияДиаграммы.НеИспользовать;
	ЧистыйДенежныйПоток.ОтображатьЛегенду=Истина;
	ЧистыйДенежныйПоток.Обновление=Ложь;
	СерияПриход=ЧистыйДенежныйПоток.УстановитьСерию("Приход");
	СерияПриход.Цвет=WebЦвета.БледноЛиловый;
	//СерияПриход.Цвет=WebЦвета.НейтральноПурпурный;
	СерияРасход=ЧистыйДенежныйПоток.УстановитьСерию("Расход");
	СерияРасход.Цвет=WebЦвета.БледноСиреневый;
	//СерияРасход.Цвет=WebЦвета.Сливовый;
	СерияПоток=ЧистыйДенежныйПоток.УстановитьСерию("Поток");
	СерияПоток.Индикатор=Истина;
	СерияПоток.Маркер=ТипМаркераДиаграммы.Квадрат;
	СерияПоток.Линия=Новый Линия(ТипЛинииДиаграммы.Сплошная,2);
	СерияПоток.Цвет=WebЦвета.Красный;
	
	ДанныеПотока=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ДанныеПотока.Следующий() Цикл
		ТочкаДата = ЧистыйДенежныйПоток.УстановитьТочку(ДанныеПотока.СтатьяДвижения);
		ТочкаДата.Текст	= ДанныеПотока.СтатьяДвижения;//?(ПоДням,Формат(ДанныеПотока.Период,"ДФ=dd.MM.yy"),Формат(ДанныеПотока.СтатьяДвижения,"ДФ='MMMM yy'"));
		
		ЧистыйДенежныйПоток.УстановитьЗначение(ТочкаДата, СерияПриход, ДанныеПотока.СуммаПриход, ,Формат(ДанныеПотока.СуммаПриход,"ЧДЦ=2"));
		ЧистыйДенежныйПоток.УстановитьЗначение(ТочкаДата, СерияРасход, ДанныеПотока.СуммаРасход, ,Формат(ДанныеПотока.СуммаРасход,"ЧДЦ=2"));
		ЧистыйДенежныйПоток.УстановитьЗначение(ТочкаДата, СерияПоток, ДанныеПотока.СуммаКонечныйОстаток, ,Формат(ДанныеПотока.СуммаКонечныйОстаток,"ЧДЦ=2"));
	КонецЦикла;
	ЧистыйДенежныйПоток.Обновление=Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьАктив(Подразделение)
	// Очистить диаграмму, возможно ранее в нее уже выводились данные. 
	БалансАктив.КоличествоСерий = 0; 
	БалансАктив.КоличествоТочек = 0; 
	
	
	// Количество серий будет ограничиваться (не все значения будут показываться). 
	БалансАктив.МаксимумСерий = МаксимумСерий.Ограничено; 
	БалансАктив.МаксимумСерийКоличество = 7; 
	БалансАктив.ВидПодписей = ВидПодписейКДиаграмме.Значение; 
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ДвиженияОстатки.СуммаОстаток) КАК СуммаОстаток,
	               |	ДвиженияОстатки.СтатьяДвижения.Родитель КАК СтатьяДвижения
	               |ИЗ
	               |	РегистрНакопления.Движения.Остатки(, Подразделение В ИЕРАРХИИ (&Подразделение)) КАК ДвиженияОстатки
	               |ГДЕ
	               |	ДвиженияОстатки.СуммаОстаток > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДвиженияОстатки.СтатьяДвижения.Родитель"; 
	
	
	Результат = Запрос.Выполнить(); 
	
	
	// Запретить обновление диаграммы на время вывода данных. 
	БалансАктив.Обновление = Ложь; 
	
	
	// Установить единственную точку. 
	БалансАктив.КоличествоТочек = 1; 
	БалансАктив.Точки[0].Текст = "Сумма"; 
	Выборка = Результат.Выбрать(); 
	
	СуммаАктив = 0;
	Пока Выборка.Следующий() Цикл 
		
		
		// Количество серий, если бы не ограничивали зависело бы от результата запроса. 
		КоличествоСерий = БалансАктив.Серии.Количество(); 
		БалансАктив.КоличествоСерий = КоличествоСерий + 1; 
		БалансАктив.Серии[КоличествоСерий].Текст = Выборка.СтатьяДвижения; 
		
		
		// Установить значение "на пересечении" точки и серии. 
		// Первый параметр - 0 , так как в диаграмме только одна точка. 
		БалансАктив.УстановитьЗначение(0, КоличествоСерий, Выборка.СуммаОстаток); 
		СуммаАктив = СуммаАктив+Выборка.СуммаОстаток;
		
	КонецЦикла; 
	БалансАктив.ОбластьЗаголовка.Текст="Итого актив:"+СуммаАктив;
	
	//Расход = СуммаАктив;
	
	// Обновить диаграмму. 
	БалансАктив.Обновление = Истина;  
КонецПроцедуры

&НаСервере
Процедура ОбновитьПассив(Подразделение)
	// Очистить диаграмму, возможно ранее в нее уже выводились данные. 
	БалансПассив.КоличествоСерий = 0; 
	БалансПассив.КоличествоТочек = 0;
	
	// Количество серий будет ограничиваться (не все значения будут показываться). 
	БалансПассив.МаксимумСерий = МаксимумСерий.Ограничено; 
	БалансПассив.МаксимумСерийКоличество = 7; 
	БалансПассив.ВидПодписей = ВидПодписейКДиаграмме.Значение; 
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(-ДвиженияОстатки.СуммаОстаток) КАК СуммаОстаток,
	               |	ДвиженияОстатки.СтатьяДвижения.Родитель КАК СтатьяДвижения
	               |ИЗ
	               |	РегистрНакопления.Движения.Остатки(, Подразделение В ИЕРАРХИИ (&Подразделение)) КАК ДвиженияОстатки
	               |ГДЕ
	               |	ДвиженияОстатки.СуммаОстаток < 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДвиженияОстатки.СтатьяДвижения.Родитель"; 
	
	
	Результат = Запрос.Выполнить(); 
	
	
	// Запретить обновление диаграммы на время вывода данных. 
	БалансПассив.Обновление = Ложь; 
	
	
	// Установить единственную точку. 
	БалансПассив.КоличествоТочек = 1; 
	БалансПассив.Точки[0].Текст = "Сумма"; 
	Выборка = Результат.Выбрать(); 
	
	СуммаПасиив = 0;
	Пока Выборка.Следующий() Цикл 
		
		
		// Количество серий, если бы не ограничивали зависело бы от результата запроса. 
		КоличествоСерий = БалансПассив.Серии.Количество(); 
		БалансПассив.КоличествоСерий = КоличествоСерий + 1; 
		БалансПассив.Серии[КоличествоСерий].Текст = Выборка.СтатьяДвижения; 
		
		
		// Установить значение "на пересечении" точки и серии. 
		// Первый параметр - 0 , так как в диаграмме только одна точка. 
		БалансПассив.УстановитьЗначение(0, КоличествоСерий, Выборка.СуммаОстаток); 
		
		СуммаПасиив = СуммаПасиив+Выборка.СуммаОстаток;
	КонецЦикла;
	БалансПассив.ОбластьЗаголовка.Текст="Итого пассив:"+СуммаПасиив;
	
	//Приход = СуммаПасиив;
	//Итого = Приход - Расход;
	//ЭтаФорма.Элементы.Группа2.Заголовок = "Движение денежных средств. Актив = "+Расход+"; Пассив = "+Приход+"; Итого = "+Итого;
	
	// Обновить диаграмму. 
	БалансПассив.Обновление = Истина;  
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикДС(Подразделение)
	// Очистить диаграмму, возможно ранее в нее уже выводились данные. 
	ГрафикДС.КоличествоСерий = 0; 
	ГрафикДС.КоличествоТочек = 0;
	
	// Количество серий будет ограничиваться (не все значения будут показываться). 
	//ГрафикДС.МаксимумСерий = МаксимумСерий.Ограничено; 
	//ГрафикДС.МаксимумСерийКоличество = 7; 
	ГрафикДС.ВидПодписей = ВидПодписейКДиаграмме.Значение; 
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДвиженияОстаткиИОбороты.ПериодМесяц,
	               |	СУММА(ДвиженияОстаткиИОбороты.СуммаПриход) КАК СуммаПриход,
	               |	СУММА(ДвиженияОстаткиИОбороты.СуммаРасход) КАК СуммаРасход
	               |ИЗ
	               |	РегистрНакопления.Движения.ОстаткиИОбороты(, , Авто, , Подразделение В ИЕРАРХИИ (&Подразделение)) КАК ДвиженияОстаткиИОбороты
	               |ГДЕ
	               |	ДвиженияОстаткиИОбороты.СтатьяДвижения В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвижения.ДенежныеСредства))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДвиженияОстаткиИОбороты.ПериодМесяц"; 
	
	
	Результат = Запрос.Выполнить(); 
	
	
	// Запретить обновление диаграммы на время вывода данных. 
	ГрафикДС.Обновление = Ложь; 
	
	
	// Установить единственную точку.
	СЧ=0;
	ГрафикДС.КоличествоТочек = 3;
	ДатаНачала = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),-2);
	Пока СЧ<3 цикл
		Дата = ДобавитьМесяц(ДатаНачала,Сч);
		ГрафикДС.Точки[СЧ].Текст = Формат(Дата,"ДФ='ММММ гггг""г.""'");
		
		
		Выборка = Результат.Выбрать(); 
		
		Пока Выборка.Следующий() Цикл 
			
			Если НачалоМесяца(Выборка.ПериодМесяц) = Дата тогда
				// Количество серий, если бы не ограничивали зависело бы от результата запроса. 
				КоличествоСерий = ГрафикДС.Серии.Количество(); 
				ГрафикДС.КоличествоСерий = 2; 
				ГрафикДС.Серии[0].Текст = "Поступление"; 
				ГрафикДС.Серии[1].Текст = "Списание"; 
				
				
				// Установить значение "на пересечении" точки и серии. 
				// Первый параметр - 0 , так как в диаграмме только одна точка. 
				ГрафикДС.УстановитьЗначение(СЧ, 0, Выборка.СуммаПриход); 
				ГрафикДС.УстановитьЗначение(СЧ, 1, Выборка.СуммаРасход); 
			Конецесли;
		КонецЦикла;
		СЧ=СЧ+1;
	КонецЦикла;
	
	// Обновить диаграмму. 
	ГрафикДС.Обновление = Истина;  
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокДокументов(Подразделение)
ДокументыДвижения.Отбор.Элементы.Очистить();
Если ЗначениеЗаполнено(Подразделение) тогда
	ГруппаОтбор = ДокументыДвижения.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	Отбор = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.Родитель = ГруппаОтбор;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	Отбор.Использование = Истина;
	Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Отбор.ПравоеЗначение = Подразделение;
КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДДС(Подразделение=Неопределено)
	ДДС.Очистить();
	//НовДДС=Отчеты.ДДС.Создать();
	//СКД = НовДДС.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 
	СКД = ПолучитьОбщийМакет("ДДСГлавная"); 
	НастройкаСКД = СКД.НастройкиПоУмолчанию; 
	Если НЕ ЗначениеЗаполнено(ТекПериод) тогда
		текПериод.Вариант=ВариантСтандартногоПериода.ЭтотМесяц;
	КонецЕсли;
	НастройкаСКД.ПараметрыДанных.Элементы[0].Значение = ТекПериод;
	Если НЕ (Подразделение=Неопределено ИЛИ Подразделение.Пустая()) тогда
		НастройкаСКД.Отбор.Элементы[0].ПравоеЗначение=Подразделение;
		НастройкаСКД.Отбор.Элементы[0].ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии;
		НастройкаСКД.Отбор.Элементы[0].Использование=Истина;
	Иначе
		НастройкаСКД.Отбор.Элементы[0].Использование=Ложь;
	КонецЕсли;
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	дРасшифровка=Новый ДанныеРасшифровкиКомпоновкиДанных;
	Макет = Компоновщик.Выполнить(СКД, НастройкаСКД, дРасшифровка); 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновки.Инициализировать(Макет,,дРасшифровка); 
	ТабДок = ДДС; 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ТабДок); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Если ЗначениеЗаполнено(URLСхемы) тогда
		URLСхемы=ПоместитьВоВременноеХранилище(СКД,URLСхемы);
	Иначе
		URLСхемы=ПоместитьВоВременноеХранилище(СКД,ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеРасшифровки) тогда
		ДанныеРасшифровки=ПоместитьВоВременноеХранилище(дРасшифровка,ДанныеРасшифровки);
	Иначе
		ДанныеРасшифровки=ПоместитьВоВременноеХранилище(дРасшифровка,ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияПриАктивизацииСтроки(Элемент)
	//ОбновитьАктив(Элемент.ТекущаяСтрока);
	//ОбновитьПассив(Элемент.ТекущаяСтрока);
	//ОбновитьГрафикДС(Элемент.ТекущаяСтрока);
	//ОбновитьСписокДокументов(Элемент.ТекущаяСтрока);
	//ОбновитьДДС(Элемент.ТекущаяСтрока);
	//УстановитьЗаголовокДДС(Элемент.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ОбновитьАктив(Элемент.ТекущаяСтрока);
	//ОбновитьПассив(Элемент.ТекущаяСтрока);
	//ОбновитьГрафикДС(Элемент.ТекущаяСтрока);
	//ОбновитьСписокДокументов(Элемент.ТекущаяСтрока);
	//УстановитьНужныйЗаголовок();
	//папки.Параметры.УстановитьЗначениеПараметра("подразделение",ВыбраннаяСтрока);
	//Элементы.папки.Обновить();
	//ОбновитьДДС(Элемент.ТекущаяСтрока);
	//УстановитьЗаголовокДДС(Элемент.ТекущаяСтрока);
	//ОбновитьЧистыйДенежныйПоток(Элемент.ТекущаяСтрока);
	ПараметрыВыбора = Новый Структура();
	ПараметрыВыбора.Вставить("Подразделение",ВыбраннаяСтрока);//Элемент.ТекущиеДанные.Подразделение);
	ПараметрыВыбора.Вставить("КонечныйОстаток",Элемент.ТекущиеДанные.Остаток);//Элемент.ТекущиеДанные.СуммаОстаток);
	Форма = ПолучитьФорму("Обработка.МониторПоказателей.Форма.ФормаДетальнойРаботы",ПараметрыВыбора,,Истина);
	Форма.Открыть();
	ОбновитьДиаграммаПульс(Элемент.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура БалансАктивВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	// ЗначениеДиаграммы.Серия.Расшифровка
КонецПроцедуры

&НаСервере
Функция ПолучитьСправочникДС() 
	Возврат Справочники.СтатьиДвижения.ДенежныеСредства;
КонецФункции

&НаСервере
Процедура УстановитьНужныйЗаголовок()
Схема 		= Элементы.ДокументыДвижения.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
Настройки 	= Элементы.ДокументыДвижения.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
МакетКомпановки = КомпоновщикМакета.Выполнить(Схема,Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

ПроцессорКомпановки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпановки.Инициализировать(МакетКомпановки);

ДокументРезультат = Новый ТаблицаЗначений;
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(ДокументРезультат);

Результат = ПроцессорВывода.Вывести(ПроцессорКомпановки);

СуммаПриход = 0;	СуммаРасход = 0; //Обнуляем наши значения прихода и расхода
ВыделенныеСтроки = Результат;
ДенежСредства = ПолучитьСправочникДС();
	Для каждого СтрокаДвижение из  ВыделенныеСтроки Цикл
		Если (СтрокаДвижение.СтатьяДвижения = ДенежСредства или СтрокаДвижение.СтатьяДвижения.Родитель = ДенежСредства) Тогда
			СуммаПриход = СтрокаДвижение.Приход + СуммаПриход;
			СуммаРасход = СтрокаДвижение.Расход + СуммаРасход;
		КонецЕсли;
	КонецЦикла;
ЭтаФорма.Элементы.Группа2.Заголовок = "Движение денежных средств. Пришло = "+СуммаПриход+"; Ушло = "+СуммаРасход+"; Итого = "+(СуммаПриход-СуммаРасход);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДДС(текПодразделение=Неопределено)
	текЗаголовок=Формат(текПериод.ДатаНачала,"ДФ=dd.MM.yyyy")+" - "+Формат(текПериод.ДатаОкончания,"ДФ=dd.MM.yyyy");
	Если НЕ (текПодразделение=Неопределено ИЛИ текПодразделение=Справочники.Подразделения.ПустаяСсылка()) тогда
		текЗаголовок=Строка(текПодразделение)+", "+текЗаголовок;
	КонецЕсли;
	ЭтаФорма.Элементы.Группа2.Заголовок = текЗаголовок;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокПодразделение(текПодразделение=Неопределено)
//схема = папки.получитьИсполняемуюСхемуКомпоновкиДанных();
//Настройки = папки.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
//МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема,Настройки);

//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

//Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если НЕ ЗначениеЗаполнено(ТекПериод) тогда
	//	текПериод.Вариант=ВариантСтандартногоПериода.ЭтотКвартал;
	//КонецЕсли;
	Если СервисныеМеханизмы.НужнаНастройкаПриПервомЗапуске() тогда
		ОткрытьФорму("Обработка.МастерНастройки.Форма",,,,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДвиженияПриИзменении(Элемент)
	УстановитьНужныйЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДвиженияПриАктивизацииЯчейки(Элемент)
	УстановитьНужныйЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	ОткрытьФОрму("Документ.Движения.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СписокДвижений(Команда)
	ОткрытьФОрму("Документ.Движения.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТекущийПериод(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = текПериод;
	ОповещениеОЗакрытииДиалогаПериода=Новый ОписаниеОповещения("ЗакрытиеДиалогаВыбораПериода",ЭтаФорма);
	Диалог.Показать(ОповещениеОЗакрытииДиалогаПериода);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеДиалогаВыбораПериода(Период,ДополнительныеПараметры) Экспорт
	Если НЕ Период=Неопределено Тогда 
	    ТекПериод = Период;
		Если Элементы.Подразделения.ВыделенныеСтроки.Количество() тогда
			ОбновитьДДС(Элементы.Подразделения.ТекущаяСтрока);
			УстановитьЗаголовокДДС(Элементы.Подразделения.ТекущаяСтрока);
			ОбновитьЧистыйДенежныйПоток(Элементы.Подразделения.ТекущаяСтрока);
		Иначе
			ОбновитьДДС();
			УстановитьЗаголовокДДС();
			ОбновитьЧистыйДенежныйПоток();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ДобавленоДвижение" И Параметр >= ТекПериод.ДатаНачала И Параметр <= ТекПериод.ДатаОкончания тогда
		Если Элементы.Подразделения.ВыделенныеСтроки.Количество() тогда
			ОбновитьДДС(Элементы.Подразделения.ТекущаяСтрока);
			ОбновитьЧистыйДенежныйПоток(Элементы.Подразделения.ТекущаяСтрока);
		Иначе
			ОбновитьДДС();
			ОбновитьЧистыйДенежныйПоток();
		КонецЕсли;
	ИначеЕсли ИмяСобытия="ВводМастером" тогда
		Элементы.Подразделения.Обновить();
		Если ТекущаяДата() >= ТекПериод.ДатаНачала И ТекущаяДата() <= ТекПериод.ДатаОкончания тогда
			Если Элементы.Подразделения.ВыделенныеСтроки.Количество() тогда
				ОбновитьДДС(Элементы.Подразделения.ТекущаяСтрока);
				ОбновитьЧистыйДенежныйПоток(Элементы.Подразделения.ТекущаяСтрока);
			Иначе
				ОбновитьДДС();
				ОбновитьЧистыйДенежныйПоток();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуНаСервере(
	Расшифровка,
	МассивИменРасшифровки,
	ЭтоГруппа = Ложь)

	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭлементРасшифровки=Данные.Элементы.Получить(Расшифровка);
	Поля = ЭлементРасшифровки.ПолучитьПоля();
	Для Каждого ИмяРасшифровки Из МассивИменРасшифровки Цикл
		ПолеНоменкл = Поля.Найти(ИмяРасшифровки);
		Если Не ПолеНоменкл = Неопределено Тогда
			Результат = Новый Структура("Статья,СтатьяДвижения,ДДС,ТипДвижения,ПериодМесяц");
			Если ИмяРасшифровки="СуммаПриход" тогда
				Результат.ТипДвижения="Приход";
			ИначеЕсли ИмяРасшифровки="СуммаРасход" тогда
				Результат.ТипДвижения="Расход";
			КонецЕсли;
			Родители=ЭлементРасшифровки.ПолучитьРодителей();
			Для Каждого текРодитель из Родители Цикл
				Если Типзнч(текРодитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
					ПоляРодители=текРодитель.ПолучитьПоля();
					текПоле=ПоляРодители.Найти("СтатьяДвиженияКудаОткуда");
					Если НЕ текПоле=Неопределено тогда
						Результат.Статья=текПоле.Значение;
					КонецЕсли;
					текПоле=ПоляРодители.Найти("СтатьяДвижения");
					Если НЕ текПоле=Неопределено тогда
						Результат.СтатьяДвижения=текПоле.Значение;
					КонецЕсли;
					текПоле=ПоляРодители.Найти("КудаОткудаДДС");
					Если НЕ текПоле=Неопределено тогда
						Результат.ДДС=текПоле.Значение;
					КонецЕсли;
					текПоле=ПоляРодители.Найти("ПериодМесяц");
					Если НЕ текПоле=Неопределено тогда
						Результат.ПериодМесяц=текПоле.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			Если ЗначениеЗаполнено(Результат.Статья) тогда
				Результат.ДДС=Результат.Статья.РазделДДС;
			ИначеЕсли ЗначениеЗаполнено(Результат.ДДС) тогда
				Результат.Статья=Справочники.СтатьиДвижения.ПустаяСсылка();
	        КонецЕсли;
			Возврат Результат;	
			//ПолеРодитель = ЭлементРасшифровки.ПолучитьРодителей()[0];
			//Если Типзнч(ПолеРодитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			//    ЗначениеПоля = ПолеРодитель.ПолучитьПоля().Получить(0);
			//иначе
			//    ЗначениеПоля = ПолеРодитель.ПолучитьРодителей()[0].ПолучитьПоля().Получить(0);
			//КонецЕсли;
			//Если ТипЗнч(ЗначениеПоля.Значение)=Тип("СправочникСсылка.СтатьиДвижения") тогда
			//	Возврат Новый Структура("Статья,ДДС",ЗначениеПоля.Значение,ЗначениеПоля.Значение.РазделДДС);
			//ИначеЕсли ТипЗнч(ЗначениеПоля.Значение)=Тип("ПеречислениеСсылка.РазделыДДС") тогда
			//	Возврат Новый Структура("Статья,ДДС",Справочники.СтатьиДвижения.ПустаяСсылка(),ЗначениеПоля.Значение);
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ДДСОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	//Здесь заполняем колонки, на которые должна реагировать расшифровка. 
	//В данном варианте отчета поля д.б. ссылками 

	МРасшифровываемых = Новый Массив();
	МРасшифровываемых.Добавить("СуммаПриход");
	МРасшифровываемых.Добавить("СуммаРасход");
	МРасшифровываемых.Добавить("СтатьяДвиженияКудаОткуда");
	МРасшифровываемых.Добавить("КудаОткудаДДС");
	МРасшифровываемых.Добавить("ПериодМесяц");
	МРасшифровываемых.Добавить("Сальдо");
	МРасшифровываемых.Добавить("СуммаКонечныйОстаток");
	МРасшифровываемых.Добавить("СуммаНачальныйОстаток");

	//Полученное значение 

	РасшифрЗначение = ПолучитьРасшифровкуНаСервере(Расшифровка, МРасшифровываемых); 

	Если РасшифрЗначение = Неопределено Тогда 
		Возврат; 
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	// Прописываем доступные действия. Если какое то действие не указать, 
	//оно не будет доступно пользователю

	//ОбрРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки,
	//Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	//ВыпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
	//ПараметрВыполненногоДействия = Неопределено;
	//ДоступДействия = Новый Массив;
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
	//ДоступДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);

	////Создаем собственные действия
	//ДопПункты = Новый СписокЗначений;
	//ОбщСтрока = "Открыть отчет Расчеты с поставщиками "	+ """" + Строка(ТипЗнч(РасшифрЗначение)) + " = " + РасшифрЗначение + """";
	//ДопПункты.Добавить( 1, ОбщСтрока + " за 1 мес.");
	//ДопПункты.Добавить( 3, ОбщСтрока + " за 3 мес.");
	//ДопПункты.Добавить( 6, ОбщСтрока + " за 6 мес.");
	//ДопПункты.Добавить(12, ОбщСтрока + " за 12 мес.");

	////Меню 
	//ОбрРасшифровки.ВыбратьДействие(Расшифровка,ВыпДействие,ПараметрВыполненногоДействия,ДоступДействия,ДопПункты);

	//ЕслиВыпДействие	= ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
	//ИначеЕсли ВыпДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
	//	ОткрытьЗначение(ПараметрВыполненногоДействия);
	//ИначеЕсли ТипЗнч(ВыпДействие) = Тип("Число") Тогда 
	
	текНастройки = ПолучитьНастройкиОтчета();
	УстановитьЗначениеПараметра(текНастройки, "Период", текПериод);
	Если Элементы.Подразделения.ВыделенныеСтроки.Количество() И НЕ Элементы.Подразделения.ТекущаяСтрока.Пустая() тогда
		УстановитьЗначениеОтбора(текНастройки, "Подразделение", Элементы.Подразделения.ТекущаяСтрока, ВидСравненияКомпоновкиДанных.ВИерархии);
		//УстановитьЗначениеОтбора(текНастройки, "ПодразделениеКудаОткуда", Элементы.Подразделения.ТекущаяСтрока, ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
	Если ЗначениеЗаполнено(РасшифрЗначение.СтатьяДвижения) тогда
		УстановитьЗначениеОтбора(текНастройки, "СтатьяДвижения",РасшифрЗначение.СтатьяДвижения,ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
	Если ЗначениеЗаполнено(РасшифрЗначение.Статья) тогда
		УстановитьЗначениеОтбора(текНастройки, "СтатьяДвиженияКудаОткуда",РасшифрЗначение.Статья,ВидСравненияКомпоновкиДанных.ВИерархии);
	ИначеЕсли ЗначениеЗаполнено(РасшифрЗначение.ДДС) тогда
		УстановитьЗначениеОтбора(текНастройки, "ДДСКудаОткуда",РасшифрЗначение.ДДС, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	Если ЗначениеЗаполнено(РасшифрЗначение.ПериодМесяц) тогда
		УстановитьЗначениеОтбора(текНастройки, "ПериодМесяц",РасшифрЗначение.ПериодМесяц, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	Если РасшифрЗначение.ТипДвижения="Приход" тогда
		УстановитьЗначениеОтбора(текНастройки, "СуммаПриход", 0, ВидСравненияКомпоновкиДанных.Больше); 
	КонецЕсли;
	Если РасшифрЗначение.ТипДвижения="Расход" тогда
		УстановитьЗначениеОтбора(текНастройки, "СуммаРасход", 0, ВидСравненияКомпоновкиДанных.Больше); 
	КонецЕсли;
	ПараметрыОтчета = Новый Структура("СформироватьПриОткрытии", Истина);
	ФормаРасшифровка = ПолучитьФорму("Отчет.Расшифровка_движения.Форма", ПараметрыОтчета, ЭтаФорма,РасшифрЗначение);
	ФормаРасшифровка.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(текНастройки);
	ФормаРасшифровка.СкомпоноватьРезультат();
	ФормаРасшифровка.Открыть();
	
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьНастройкиОтчета()
   Возврат Отчеты.Расшифровка_движения.Создать().КомпоновщикНастроек.ПолучитьНастройки();
КонецФункции

&НаСервере 
Процедура УстановитьЗначениеОтбора(Настройки, Имя, Значение, ВидСравнения) 
   Для Каждого элемент Из Настройки.Отбор.Элементы Цикл
       Если элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя) Тогда
           элемент.ПравоеЗначение = Значение;
		   элемент.ВидСравнения=ВидСравнения;
           элемент.Использование = Истина;
       КонецЕсли;
   КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьФормуРасшифровки(РасшифрЗначение)
	тОтчет = Отчеты.Расшифровка_движения.Создать();

	НастройкиСКД = тОтчет.КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиСКД.ПараметрыДанных.Элементы[0].Значение = ТекПериод;

	ПолеПодразделение = тОтчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("ПодразделениеКудаОткуда"); //поле отбора присутствует в СКД
	ПолеСтатья = тОтчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("СтатьяДвиженияКудаОткуда"); //поле отбора присутствует в СКД
	ПолеДДС = тОтчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("ДДСКудаОткуда"); //поле отбора присутствует в СКД
	ПолеПериод = тОтчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("ПериодМесяц"); //поле отбора присутствует в СКД
	ПолеПриход = тОтчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("СуммаПриход"); //поле отбора присутствует в СКД
	ПолеРасход = тОтчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("СуммаРасход"); //поле отбора присутствует в СКД

	Если ЗначениеЗаполнено(РасшифрЗначение.ПериодМесяц) тогда
		НовыйОтбор = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = ПолеПериод.Поле;
		НовыйОтбор.ПравоеЗначение = РасшифрЗначение.ПериодМесяц;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РасшифрЗначение.Статья) тогда
		НовыйОтбор = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = ПолеСтатья.Поле;
		НовыйОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии;
		НовыйОтбор.ПравоеЗначение=РасшифрЗначение.Статья;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РасшифрЗначение.ДДС) тогда
		НовыйОтбор = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = ПолеДДС.Поле;
		НовыйОтбор.ПравоеЗначение=РасшифрЗначение.ДДС;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;
	Если РасшифрЗначение.ТипДвижения="Приход" тогда
		НовыйОтбор = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = ПолеПриход.Поле;
		НовыйОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше;
		НовыйОтбор.ПравоеЗначение=0;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;
	Если РасшифрЗначение.ТипДвижения="Расход" тогда
		НовыйОтбор = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = ПолеРасход.Поле;
		НовыйОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше;
		НовыйОтбор.ПравоеЗначение=0;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;

	тОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	тФорма = тОтчет.ПолучитьФорму("ФормаОтчета");
	тОтчет.СкомпоноватьРезультат(тФорма.ЭлементыФормы.Результат); //таб док на форме
КонецФункции

&НаСервере 
Процедура УстановитьЗначениеПараметра(Настройки, Имя, Значение) 
   Для Каждого элемент Из Настройки.ПараметрыДанных.Элементы Цикл
       Если ТипЗнч(элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
           Если Строка(элемент.Параметр) = Имя Тогда
               элемент.Значение = Значение;
               элемент.Использование = Истина;
           КонецЕсли;
       КонецЕсли;
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвернутьНажатие(Элемент)
	Элементы.ГруппаПодразделения.Видимость = Ложь;
	Элементы.ДекорацияСвернуть.Видимость   = Ложь;
	Элементы.ДекорацияРазвернуть.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьНажатие(Элемент)
	Элементы.ГруппаПодразделения.Видимость = Истина;
	Элементы.ДекорацияСвернуть.Видимость   = Истина;
	Элементы.ДекорацияРазвернуть.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернуть1Нажатие(Элемент)
	Элементы.папки.Видимость = Истина;
	Элементы.ДекорацияСвернуть1.Видимость   = Истина;
	Элементы.ДекорацияРазвернуть1.Видимость = Ложь;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвернуть1Нажатие(Элемент)
	Элементы.папки.Видимость = Ложь;
	Элементы.ДекорацияСвернуть1.Видимость   = Ложь;
	Элементы.ДекорацияРазвернуть1.Видимость = Истина;

	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПодразделенияПриИзмененииНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияПриИзменении(Элемент)
	ПодразделенияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТестВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура();
 	ПараметрыВыбора.Вставить("Подразделение",Элемент.ТекущиеДанные.Ссылка);//Элемент.ТекущиеДанные.Подразделение);
	ПараметрыВыбора.Вставить("КонечныйОстаток",Элемент.ТекущиеДанные.Остаток);//Элемент.ТекущиеДанные.СуммаОстаток);
	Форма = ПолучитьФорму("Обработка.МониторПоказателей.Форма.ФормаДетальнойРаботы",ПараметрыВыбора,,Истина);
	Форма.Открыть();
	ОбновитьДиаграммаПульс(Элемент.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	// Вставить содержимое обработчика.
	ТекДанные = Элементы.ВходящиеДокументы.ТекущиеДанные;
	Форма = ПолучитьФорму("Документ.Движения.ФормаОбъекта");
	ДанныеФормы = Форма.Объект;
	ЗаполнитьДокументНаСервере(ДанныеФормы, ТекДанные);
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументНаСервере(ДанныеФормы, ТекДанные);
	Док = ДанныеФормыВЗначение(ДанныеФормы, Тип("ДокументОбъект.Движения"));
	Док.ПодразделениеОткуда = ТекДанные.Подразделение;
	Док.СтатьяДвиженияОткуда = ТекДанные.СтатьяДвижения;
	Док.Сумма = ТекДанные.СуммаОстаток;
	Док.Курс = 1;
	Док.СуммаКуда = ТекДанные.СуммаОстаток;
	Док.КурсКуда = 1;	
	Док.Дата = ТекущаяДата();
// Заполняем реквизиты какие нужно
// Док.Реквизит = " тру ля ля";
// ......
	ЗначениеВДанныеФормы(Док,ДанныеФормы);
КонецФункции 





